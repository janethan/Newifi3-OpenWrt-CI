name: NEWIFI-D2

on:
  push:
    branches:
      - master
  watch:
    types: started
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Setup Build Environment
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib
          sudo apt-get autoremove --purge -y
          sudo apt-get clean
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Download OpenWrt
        run: |
          git clone https://github.com/janethan/lede
          mv ./lede/* ./
          
      - name: Add Custom Package Repositories
        run: |
          echo "src-git helloworld https://github.com/fw876/helloworld.git" >> ./feeds.conf.default
          cd package
          mkdir openwrt-packages

      - name: Update Package Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Customize Configuration
        run: |
          sed -i 's/luci-theme-bootstrap/luci-theme-bootstrap/g' feeds/luci/collections/luci/Makefile
          sed -i 's/192.168.1.1/192.168.100.1/g' package/base-files/files/bin/config_generate
          sed -i 's/OpenWrt/iPhone/g' package/base-files/files/bin/config_generate
          sed -i 's/OpenWrt/CMCC/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh
          rm -f ./.config*
          touch ./.config
          cat >> .config <<EOF
          # Device type
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7621=y
          CONFIG_TARGET_ramips_mt7621_DEVICE_d-team_newifi-d2=y
          # Gzip
          CONFIG_TARGET_IMAGES_GZIP=y
          # IPv6
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=n
          CONFIG_PACKAGE_ipv6helper=n
          # USB support
          CONFIG_PACKAGE_kmod-usb-core=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-usb-storage-extras=y
          CONFIG_PACKAGE_automount=y
          # CONFIG_PACKAGE_sshtunnel=y
          
          # Filesystem
          CONFIG_PACKAGE_kmod-fs-exfat=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          
          # USPIP service
          CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_usbip=y
          # CONFIG_PACKAGE_usbip-client=y
          # CONFIG_PACKAGE_usbip-server=y
          
          # APP
          # CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-advancedsetting=y
          CONFIG_PACKAGE_luci-app-advanced=y
          # CONFIG_PACKAGE_luci-app-aliddns=y
          CONFIG_PACKAGE_luci-app-cloudflarespeedtest=y
          # CONFIG_PACKAGE_luci-app-frpc=y
          CONFIG_PACKAGE_luci-app-hd-idle=y
          # CONFIG_PACKAGE_luci-app-meshwizard=y
          # CONFIG_PACKAGE_luci-app-mwan3=y
          # CONFIG_PACKAGE_luci-app-mwan3helper=y
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_fuse-utils=n
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng=n
          # CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui=n
          CONFIG_PACKAGE_luci-app-samba=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=n
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=n
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_obfs=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NaiveProxy=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray=y
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_xray-plugin=y
          # CONFIG_PACKAGE_luci-app-syncdial=y
          CONFIG_PACKAGE_luci-app-travelmate=y
          # CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-usb-printer=y
          CONFIG_PACKAGE_luci-app-uhttpd=y
          # CONFIG_PACKAGE_luci-app-xlnetacc=y
          CONFIG_PACKAGE_luci-app-oaf=y
          CONFIG_PACKAGE_luci-app-privoxy=y
          # Open source WIFI driver
          CONFIG_PACKAGE_kmod-mt7603=y
          CONFIG_PACKAGE_kmod-mt7603e=n
          CONFIG_PACKAGE_kmod-mt76x2=y
          # CONFIG_PACKAGE_kmod-mt76x2e=n
          CONFIG_PACKAGE_hostapd-common=y
          CONFIG_PACKAGE_wpad-openssl=y
          CONFIG_PACKAGE_luci-app-mtwifi=n
          CONFIG_PACKAGE_luci-app-unblockmusic=n
          #CONFIG_PACKAGE_pixiewps=y
          #CONFIG_PACKAGE_reaver=y
          #CONFIG_PACKAGE_aircrack-ng=y
          CONFIG_PACKAGE_kmod-rt2800-usb=y
          CONFIG_PACKAGE_kmod-rt2x00-usb=y
          CONFIG_PACKAGE_kmod-rtl8187=y
          # CONFIG_PACKAGE_kmod-rtl8192ce=y
          # CONFIG_PACKAGE_kmod-rtl8192cu=y
          # CONFIG_PACKAGE_kmod-rtl8192de=y
          # CONFIG_PACKAGE_kmod-rtl8192se=y
          # CONFIG_PACKAGE_kmod-rtl8723bs=y
          # CONFIG_PACKAGE_kmod-rtl8821ae=y
          CONFIG_PACKAGE_kmod-rtl8xxxu=y
          CONFIG_PACKAGE_wireless-tools=y
          
          # Tor
           # CONFIG_PACKAGE_tor=y
           # CONFIG_PACKAGE_tor-gencert=y
           # CONFIG_PACKAGE_tor-geoip=y
           # CONFIG_PACKAGE_tor-resolve=y
          
          EOF
          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download Package Source Code
        run: |
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware
        run: |
          echo -e "$(nproc) thread build."
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_ENV
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name : Upload artifact
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt-newifi-d2
          path: bin/targets/ramips/mt7621/openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin
          # path: bin/targets/ramips/mt7621/*in*

      - name: Generate release tag
        id: tag
        if: always()
        run: |
          echo "release_tag=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_OUTPUT
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ steps.tag.outputs.release_tag }}
            #body_path: release.txt  # 发行说明
            body_path: ""
            #files: ${{ env.FIRMWARE }}/bin/targets/ramips/mt7621/*in*
            files: bin/targets/ramips/mt7621/

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: always()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
